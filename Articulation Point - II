class Solution {
  public:
     void dfs(int u, int parent, vector<int> adj[], vector<bool>& vis,
             vector<int>& tin, vector<int>& low, vector<bool>& isArticulation, int& timer) {
        
        vis[u] = true;
        tin[u] = low[u] = timer++;
        int children = 0;

        for (int v : adj[u]) {
            if (v == parent) continue;

            if (!vis[v]) {
                dfs(v, u, adj, vis, tin, low, isArticulation, timer);
                low[u] = min(low[u], low[v]);

                // Non-root case
                if (low[v] >= tin[u] && parent != -1)
                    isArticulation[u] = true;

                ++children;
            } else {
                low[u] = min(low[u], tin[v]);  // back edge
            }
        }

        // Root case
        if (parent == -1 && children > 1)
            isArticulation[u] = true;
    }

    vector<int> articulationPoints(int V, vector<vector<int>>& edges) {
        vector<int> adj[V];
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }

        vector<bool> vis(V, false), isArticulation(V, false);
        vector<int> tin(V, -1), low(V, -1);
        int timer = 0;

        for (int i = 0; i < V; ++i) {
            if (!vis[i]) {
                dfs(i, -1, adj, vis, tin, low, isArticulation, timer);
            }
        }

        vector<int> res;
        for (int i = 0; i < V; ++i) {
            if (isArticulation[i]) res.push_back(i);
        }

        if (res.empty()) return {-1};
        return res;
    }
};

class Solution
{
    private:
    Node * reverse(Node *head){
        Node * prev = NULL;
        Node * curr = head;
        while(curr && curr->data == 0){
            curr = curr->next;
        }
        while(curr){
            Node * n = curr->next;
            curr->next = prev;
            prev = curr;
            curr = n;
        }
        return prev;
    }
    
    Node * reverseRes(Node *head){
        Node * prev = NULL;
        Node * curr = head;
        
        while(curr){
            Node * n = curr->next;
            curr->next = prev;
            prev = curr;
            curr = n;
        }
        return prev;
    }
    public:
    struct Node* addTwoLists(struct Node* num1, struct Node* num2)
    {
        if(!num1) return num2;
        if(!num2) return num1;
        if(!num1 && !num2) return NULL;
        
        num1 = reverse(num1);
        num2 = reverse(num2);
        
        int carry = 0;
        Node * res = new Node(0);
        Node * temp = res;
        
        while(num1 || num2){
            int n1 = num1==NULL ? 0 : num1->data;
            int n2 = num2==NULL ? 0 : num2->data;
            int sum = n1 + n2 + carry;
            
            int currSum = sum;
            sum = currSum%10;
            carry = currSum/10;
            
            Node * newNode = new Node(sum);
            temp->next = newNode;
            
            temp = temp->next;
            if(num1)
                num1 = num1->next;
            if(num2)
                num2 = num2->next;
        }
        
        if(carry > 0){
            Node * newNode = new Node(carry);
            temp->next = newNode;
        }
        
        return !res->next ? res : reverseRes(res->next);
    }
};

class Solution {
  public:
    // Function to find a solved Sudoku.
    bool isSafe(vector<vector<int>> &mat, int row, int col ,int num,vector<vector<bool>> &rowCheck,
    vector<vector<bool>> &colCheck,vector<vector<bool>> &boxCheck){
        int boxIndex = (row/3) * 3 + col/3;
        return !rowCheck[row][num] && !colCheck[col][num] && !boxCheck[boxIndex][num];
    }
    
    bool solve(vector<vector<int>> &mat,vector<vector<bool>> &rowCheck,
    vector<vector<bool>> &colCheck,vector<vector<bool>> &boxCheck,int row,int col){
        if (row == 9) return true;
        if (col == 9) return solve(mat,rowCheck,colCheck,boxCheck,row+1,0);
        if(mat[row][col] !=0) return solve(mat,rowCheck,colCheck,boxCheck,row,col+1);
        
        int boxIndex = (row/3)*3 +col/3;
        for(int num = 1;num<=9;num++){
            if(isSafe(mat,row,col,num,rowCheck,colCheck,boxCheck)){
                mat[row][col] = num;
                rowCheck[row][num] = colCheck [col][num] =boxCheck[boxIndex][num] = true;
                
                
                if(solve(mat,rowCheck,colCheck,boxCheck,row,col+1)) return true;
                
                
                mat[row][col]=0;
                rowCheck[row][num] = colCheck[col][num] = boxCheck[boxIndex][num] = false;
            }
        }
        return false;
    }
    
    void solveSudoku(vector<vector<int>> &mat) {
        vector<vector<bool>> rowCheck(9, vector<bool>(10,false));
        vector<vector<bool>> colCheck(9, vector<bool>(10,false));
        vector<vector<bool>> boxCheck(9, vector<bool>(10,false));
        for(int i =0;i<9;i++)
        for(int j =0;j<9;j++)
        if(mat[i][j] != 0){
            int num = mat[i][j];
            int boxIndex = (i/3)*3+j/3;
            rowCheck[i][num] = colCheck[j][num] = boxCheck[boxIndex][num] = true;
        }
        solve(mat,rowCheck,colCheck,boxCheck,0,0);
    }
};
